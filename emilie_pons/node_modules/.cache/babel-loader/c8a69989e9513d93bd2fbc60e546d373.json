{"ast":null,"code":"var _jsxFileName = \"/Users/ramziosta/Desktop/AuthorPodcast/emily_pons/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this), document.getElementById('root')); // import express from \"express\";\n// import ufo from \"./ufo.js\";\n// import { MongoClient } from \"mongodb\";\n// //const { MongoClient } = require(\"mongodb\");\n// // Replace the uri string with your MongoDB deployment's connection string.\n// const uri =\n//   \"mongodb+srv://ramziosta:dbUserPassword@cluster0.lznw5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n// const client = new MongoClient(uri);\n// const app = express();\n// const PORT = 5000;\n// app.use(function(req, res, next) {\n//   res.header(\"Access-Control-Allow-Origin\", \"*\");\n//   res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n//   next();\n// });\n// app.listen(PORT,console.log(`express running on ${PORT}`));\n// app.get(\"/ufo\", async (req,res)=>{\n//   async function run() {\n//     try {\n//       await client.connect();\n//       const database = client.db('ufo');\n//       const alien = database.collection('sightings');\n//       // Query for a movie that has the title 'Back to the Future'\n//       const query = { State :\"NJ\" };\n//       const tt = await alien.findOne(query);\n//       return tt;\n//     } finally {\n//       // Ensures that the client will close when you finish/error\n//       await client.close();\n//     }\n//   }\n//   const results = await run().catch(console.dir)\n//  res.send(results);\n// });","map":{"version":3,"sources":["/Users/ramziosta/Desktop/AuthorPodcast/emily_pons/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAGAD,QAAQ,CAACE,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// import express from \"express\";\n// import ufo from \"./ufo.js\";\n// import { MongoClient } from \"mongodb\";\n// //const { MongoClient } = require(\"mongodb\");\n\n// // Replace the uri string with your MongoDB deployment's connection string.\n// const uri =\n//   \"mongodb+srv://ramziosta:dbUserPassword@cluster0.lznw5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n\n// const client = new MongoClient(uri);\n\n\n\n// const app = express();\n// const PORT = 5000;\n\n// app.use(function(req, res, next) {\n//   res.header(\"Access-Control-Allow-Origin\", \"*\");\n//   res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n//   next();\n// });\n\n// app.listen(PORT,console.log(`express running on ${PORT}`));\n\n// app.get(\"/ufo\", async (req,res)=>{\n//   async function run() {\n//     try {\n//       await client.connect();\n  \n//       const database = client.db('ufo');\n//       const alien = database.collection('sightings');\n  \n//       // Query for a movie that has the title 'Back to the Future'\n//       const query = { State :\"NJ\" };\n//       const tt = await alien.findOne(query);\n  \n//       return tt;\n//     } finally {\n//       // Ensures that the client will close when you finish/error\n//       await client.close();\n//     }\n//   }\n//   const results = await run().catch(console.dir)\n//  res.send(results);\n// });\n\n"]},"metadata":{},"sourceType":"module"}